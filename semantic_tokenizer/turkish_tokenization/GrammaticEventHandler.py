roots_file = open("../tr_tokenizer/veri/tum_kokler.txt", "r")
all_roots = roots_file.readlines()

suffixes = ['şer',
 'la',
 'alak',
 'ecek',
 'man',
 'ymiş',
 'ci',
 't',
 'mık',
 'çe',
 'mse',
 'ydi',
 'en',
 'ça',
 'tu',
 'şın',
 'yse',
 'ık',
 'ış',
 'layın',
 'nün',
 'dirler',
 'tir',
 'üncü',
 'y',
 'rek',
 'emek',
 'dür',
 'lak',
 'dan',
 'tür',
 'ge',
 'gıç',
 'sı',
 'cü',
 'a',
 'amak',
 'nci',
 'el',
 'i',
 'ce',
 'dü',
 'ti',
 'kur',
 'sak',
 'de',
 'u',
 'eceğ',
 'enek',
 'ncü',
 'da',
 'msa',
 'leri',
 'cuk',
 'ken',
 'men',
 'den',
 'çil',
 'kek',
 'sek',
 'di',
 'si',
 'te',
 'lar',
 'ım',
 'lü',
 'eç',
 'ü',
 'cık',
 'çıl',
 'cileyin',
 'gil',
 'guç',
 'meç',
 'makta',
 'lük',
 'n',
 'cül',
 'tı',
 'cil',
 'müş',
 'ca',
 'meli',
 'ele',
 'kaç',
 'muş',
 'gül',
 'du',
 'li',
 'kil',
 'şin',
 'maca',
 'tur',
 'ten',
 'luk',
 'sel',
 'kür',
 'k',
 'laş',
 'an',
 'ler',
 'acak',
 'msi',
 'ga',
 'tü',
 'çuk',
 'kır',
 'un',
 'se',
 'ncu',
 'ı',
 'yor',
 'leyin',
 'ka',
 'l',
 'im',
 'nç',
 'mece',
 'çı',
 'nun',
 'msı',
 'sin',
 'p',
 'maç',
 'ak',
 'ala',
 'lık',
 'imiz',
 'er',
 'çul',
 'sız',
 'malı',
 'ta',
 'mtırak',
 'ıcı',
 'mik',
 'muk',
 'msu',
 'çu',
 'ncı',
 'lek',
 'lu',
 'me',
 'mış',
 'iniz',
 'teş',
 'rak',
 'ç',
 'kir',
 'siz',
 'siniz',
 'miş',
 'çık',
 'ün',
 'm',
 'r',
 'ağan',
 'yecek',
 'ma',
 'ki',
 'eğen',
 'mede',
 'cıl',
 'al',
 'giç',
 'cu',
 'sa',
 'çü',
 'sü',
 'cük',
 'mak',
 'ımsa',
 'ek',
 'su',
 'gı',
 'lik',
 'süz',
 'aç',
 'dur',
 'mü',
 'yacak',
 'cik',
 'anak',
 'elek',
 'dır',
 'iz',
 'ş',
 'cul',
 'gaç',
 'dir',
 'in',
 'mek',
 'sal',
 'kan',
 'şar',
 'ıntı',
 'ar',
 'cı',
 'çük',
 'acağ',
 'nin',
 'mu',
 'mı',
 'dı',
 'deki',
 'daş',
 'suz',
 'çik',
 'nın',
 'e',
 'ın',
 'ayım',
 'tan',
 'lı',
 'tır',
 'mi',
 'ır',
 'çi',
 'le',
 'mekte',
 'deş',
 'z',
 'taş',
 'geç',
 'kıl']

class GrammaticEventHandler:

    def encode(self, word):
        #Baştan en uzun kökü bul 
        subword = ""
        possible_roots = []

        for i in range(len(word)):
            subword += word[i] 
            if subword in all_roots:
                possible_roots.insert(subword)
        if len(possible_roots) != 0:
            root = max(possible_roots)    
            #kökten sonra en uzun eki bul kelime bitene kadar 
            for i in range(len(word), len(root)):
                pass  # Add your logic here
                
            #kelimeyi ayırmadan ses olaylarını kontrol et, düzelt

            #kelimeyi ayır array dön bitir

        #else:    
            #sondan en uzun eki çıkar kök bul 

            #kök etkili olayları kontrol et 

            #kelimeyi ayır array dön bitir